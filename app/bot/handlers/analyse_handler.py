import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.bot.keyboards.inline import get_cancel_analysis_keyboard
from app.bot.states import AnalyseState
from app.bot.utils.message_splitter import send_long_message
from app.core.settings import settings
from app.services.av_client import AvClient
from app.services.gemini_client import analyze_ad
from app.services.kufar_client import KufarClient

router = Router()
URL_PATTERN = re.compile(r"https?://\S+")


async def process_analysis_request(message: Message, url: str):
    ad_data = None
    thinking_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ... üß†")

    try:
        if "av.by" in url:
            client = AvClient()
            ad_data = await client.get_ad_details(url)
        elif "kufar.by" in url:
            client = KufarClient()
            ad_data = await client.get_ad_details_by_url(url)
        else:
            await thinking_message.edit_text(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —Å av.by –∏ kufar.by."
            )
            return

        if not ad_data:
            await thinking_message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏."
            )
            return

        analysis_result = await analyze_ad(ad_data)

        await thinking_message.delete()

        if analysis_result:
            await send_long_message(message.bot, message.chat.id, analysis_result)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")

    except Exception as e:
        logging.error(
            f"An unexpected error occurred in process_analysis_request for url {url}: {e}",
            exc_info=True,
        )
        try:
            await thinking_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        except Exception:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")


@router.callback_query(F.data == "analyse_by_link")
async def start_analysis_by_link(callback: CallbackQuery, state: FSMContext):
    if not settings.gemini_api_key:
        await callback.answer(
            "–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API-–∫–ª—é—á.", show_alert=True
        )
        return

    await state.set_state(AnalyseState.waiting_for_link)
    sent_message = await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (av.by –∏–ª–∏ kufar.by) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=get_cancel_analysis_keyboard(),
    )
    await state.update_data(prompt_message_id=sent_message.message_id)
    await callback.answer()


@router.message(AnalyseState.waiting_for_link, F.text)
async def process_link_for_analysis(message: Message, state: FSMContext):
    match = URL_PATTERN.search(message.text)
    if not match:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    url = match.group(0)
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")

    await message.delete()
    if prompt_message_id:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id, message_id=prompt_message_id
            )
        except Exception:
            pass

    await state.clear()
    await process_analysis_request(message, url)
